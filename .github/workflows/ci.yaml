on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

name: CI

jobs:
  rustfmt:
    name: Check code formatting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - run: cargo fmt --check

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        project: ["libsignal-service"]
    steps:
      - uses: actions/checkout@v3
      - name: Install protobuf
        run: |
          sudo apt-get update
          sudo apt-get install -y libprotobuf-dev libprotobuf-c-dev protobuf-compiler protobuf-c-compiler
      - uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --features "${{ matrix.features }}" --manifest-path ${{ matrix.project }}/Cargo.toml

  build:
    name: Build (${{ matrix.project }}, Rust ${{ matrix.toolchain }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        project: ["libsignal-service"]
        toolchain: ["stable", "beta", "nightly"]
        coverage: [false, true]
        features: ["", "unsend-futures"]
        exclude:
          # Coverage related excludes
          - toolchain: stable
            coverage: true
          - toolchain: beta
            coverage: true
          - toolchain: nightly
            coverage: false

          # Feature flag related excludes
            # Actix like above
          - features: "unsend-futures"
            toolchain: "beta"
          - features: "unsend-futures"
            toolchain: "nightly"
    steps:
      - uses: actions/checkout@v3
      - name: Install protobuf
        run: |
          sudo apt-get update
          sudo apt-get install -y libprotobuf-dev libprotobuf-c-dev protobuf-compiler protobuf-c-compiler
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.toolchain }}
          override: true

      - name: Run tests
        uses: actions-rs/cargo@v1
        if: ${{ !matrix.coverage }}
        with:
          command: test
          args: --all-targets --no-fail-fast --features "${{ matrix.features }}" --manifest-path ${{ matrix.project }}/Cargo.toml

      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --all-targets --features "${{ matrix.features }}" --manifest-path ${{ matrix.project }}/Cargo.toml

      - name: Run tests
        uses: actions-rs/cargo@v1
        if: ${{ matrix.coverage }}
        with:
          command: test
          args: --all-targets --no-fail-fast --features "${{ matrix.features }}" --manifest-path ${{ matrix.project }}/Cargo.toml
        env:
          CARGO_INCREMENTAL: '0'
          RUSTFLAGS: '-Zprofile -Ccodegen-units=1 -Cinline-threshold=0 -Clink-dead-code -Coverflow-checks=off -Cpanic=abort -Zpanic_abort_tests'
          RUSTDOCFLAGS: '-Zprofile -Ccodegen-units=1 -Cinline-threshold=0 -Clink-dead-code -Coverflow-checks=off -Cpanic=abort -Zpanic_abort_tests'

      - name: Generate code coverage
        uses: actions-rs/grcov@v0.1
        if: ${{ matrix.coverage }}

      - name: Upload coverage reports to Codecov with GitHub Action
        uses: codecov/codecov-action@v3
        if: ${{ matrix.coverage }}
